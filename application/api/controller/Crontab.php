<?php
/**
 * Created by PhpStorm.
 * User: Jason
 * Date: 2017/8/28
 * Time: 22:51
 */
namespace app\api\controller;

use think\Config;
use think\Cache;
use think\Db;
use think\Session;
use app\common\controller\ApiCommon;


class Crontab extends ApiCommon {

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 备份数据库
     * url: /api/crontab/dumpSql
     * @return \think\response\Json
     */
    public function dumpSql()
    {
        $shell = "mysqldump -u".
            Config::get('database.username').
            " -p".
            Config::get('database.password').
            " ".
            Config::get('database.database').
            " > ".
            ROOT_PATH ."sql". DS ."cblog".
            date("Ymd").
            ".sql";
        exec($shell);

        $result = [
            'code'   => 1,
            'msg' => '备份成功'
        ];
        return json($result);
    }

    /**
     * 同步文章阅读数到数据库中
     * url: /api/crontab/SyncReading
     */
    public function SyncReading()
    {
        $idList = Db::name('article')
            ->where('status', 1)
            ->field('id, reading')
            ->select();

        $reading = Config::get('rediskey.articleReadingkey');
        $res = '';
        foreach ($idList as $v) {
            $articleReadingKey = $reading.$v['id'];
            //获取缓存中的阅读数
            $readingValue      = Cache::get($articleReadingKey) ?: 0 ;

            //只更新redis中更新过的阅读数
            if ($readingValue !== $v['reading']) {
                //同步到数据库中的对应id中
                $res = Db::name('article')
                    ->where('id', $v['id'])
                    ->update(['reading' => $readingValue]);
            }
        }
        if ($res) {
            $result = [
                'code'   => 1,
                'msg' => '同步成功',
                'time'    => date('Y-m-d H:i:s')
            ];
        } else {
            $result = [
                'code'   => 0,
                'msg' => '没有数据同步',
                'time'    => date('Y-m-d H:i:s')
            ];
        }
        return json($result);
    }
}